package lk.ijse.hopeheavenbackend.controller;

import jakarta.validation.Valid;
import lk.ijse.hopeheavenbackend.dto.ResponseDTO;
import lk.ijse.hopeheavenbackend.dto.UserDTO;
import lk.ijse.hopeheavenbackend.service.UserService;
import lk.ijse.hopeheavenbackend.utill.VarList;
import org.aspectj.weaver.ast.Var;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("api/v1/user")
@CrossOrigin(origins = "*")
public class UserController {
    @Autowired
    private UserService userService;

    @PostMapping(value = "/register")
    public ResponseEntity<ResponseDTO> register( @RequestBody UserDTO userDTO) {
        int response = userService.addUser(userDTO);

      if(response == VarList.Created) {
          return ResponseEntity.status(HttpStatus.CREATED).body(new ResponseDTO(VarList.Created, "User Registered Successfully", null));
      } else if (response==VarList.Not_Acceptable){
          return ResponseEntity.status(HttpStatus.NOT_ACCEPTABLE).body(new ResponseDTO(VarList.Not_Acceptable, "User Already Registered", null));
      }else {
          return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new ResponseDTO(VarList.Internal_Server_Error, "Something went wrong", null));
      }
    }

    @GetMapping(value = "getNextUserId")
    public ResponseEntity<ResponseDTO> getNextUserId() {
        String nextUserId = userService.generateNextUserId();
        if(nextUserId != null) {
            return ResponseEntity.status(HttpStatus.CREATED).body(new ResponseDTO(VarList.Created, "New UserId Successfully Generated", nextUserId));
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new ResponseDTO(VarList.Internal_Server_Error, "Something went wrong", null));
        }
    }

    @GetMapping(value = "getAllUsers")
    public ResponseEntity<ResponseDTO> getAllUsers() {
        if(userService.getAllUsers() != null) {
            return ResponseEntity.status(HttpStatus.CREATED).body(new ResponseDTO(VarList.Created, "All Users Successfully Fetched", userService.getAllUsers()));
        } else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new ResponseDTO(VarList.Internal_Server_Error, "Something went wrong", null));
        }
    }

    @PutMapping(value = "updateUser")
    public ResponseEntity<ResponseDTO> updateUsers(@Valid @RequestBody UserDTO userDTO){
        int response = userService.updateUsers(userDTO);
        if(response== VarList.OK){
            return ResponseEntity.status(HttpStatus.OK).body(new ResponseDTO(VarList.OK, "User Successfully Updated",null));
        } else if (response==VarList.Not_Found){
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ResponseDTO(VarList.Not_Found, "User Not Found",null));
        }else {
            return ResponseEntity.status(HttpStatus.BAD_GATEWAY).body(new ResponseDTO(VarList.Bad_Gateway, "Something went wrong",null));
        }
    }

    @DeleteMapping
    public ResponseEntity<ResponseDTO> deleteUsers(@Valid @RequestBody UserDTO userDTO){
        int response = userService.deleteUsers(userDTO.getId());
        if(response==VarList.OK){
            return ResponseEntity.status(HttpStatus.OK).body(new ResponseDTO(VarList.OK,"User Delete Successfully",null));
        } else if (response==VarList.Not_Found) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ResponseDTO(VarList.Not_Found, "User Not Found",null));
        }else {
            return ResponseEntity.status(HttpStatus.BAD_GATEWAY).body(new ResponseDTO(VarList.Bad_Gateway, "Something went wrong",null));
        }
    }
    /*@PostMapping(value = "/login")
    public ResponseEntity<ResponseDTO> login(@RequestBody UserDTO userDTO) {
        int response = userService.login(userDTO);
        if(response == VarList.OK) {
            return ResponseEntity.status(HttpStatus.OK).body(new ResponseDTO(VarList.OK, "User Login Successfully", null));
        } else if (response==VarList.Not_Found){
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ResponseDTO(VarList.Not_Found, "User Not Found", null));
        }else {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(new ResponseDTO(VarList.Internal_Server_Error, "Something went wrong", null));
        }
    }*/

}

